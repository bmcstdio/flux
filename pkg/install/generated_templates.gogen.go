// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config-configmap.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 519,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x6b\xeb\x30\x0c\xc6\xef\xfe\x2b\x3e\x1a\xde\xad\x09\xbc\x77\xcc\xed\x51\x18\xec\xb0\x5d\x36\x76\x17\xb1\xdc\x8a\x25\x76\xb0\x95\x76\xe0\xf5\x7f\x1f\x4e\x52\xb2\x8e\x9d\xa2\x58\xfa\x3e\xfd\x24\xe5\x0c\x71\x20\x6f\xd1\x1c\x82\x77\x72\x7c\x90\x9e\x0f\xc1\x2b\x7b\xbd\x3d\xfd\x4f\xcb\xf7\x89\x46\x5c\xaf\xa6\xc2\xeb\x89\xe1\x42\xdf\x87\x8b\xf8\x23\xb6\xa4\x24\x4c\x89\x2d\x34\x60\x8c\xe1\x2c\x96\x41\xe8\xe6\xf4\x14\x49\x25\x78\xb8\x10\xe1\xfa\xe9\xc3\x36\xab\xcf\x0b\x77\x91\xb5\x48\xbb\xc8\xa4\x6c\x0b\x8f\x9e\x18\x75\xbd\x28\x6b\x27\x3d\xa3\x0b\xc3\x50\x28\x7b\xf1\x6c\x2a\x84\x71\x76\x93\x74\x6b\x64\x1b\x3c\xba\x4d\x43\x69\x8d\x86\x05\x2b\xb1\x16\x2a\x8d\x13\xef\x8b\xbb\xa9\x7e\x70\x7d\xeb\x4f\x09\xb4\x0d\xb5\x47\xd0\x13\xc7\x8b\x24\x86\xe8\x7d\x9d\xa9\x40\xeb\x00\x8d\xa9\xeb\xda\xd0\x28\x6f\x1c\x93\x04\xdf\xe2\xfc\xd7\xbc\x8b\xb7\xed\x66\x65\x06\x56\xb2\xa4\xd4\x1a\xc0\xd3\xc0\xed\xbc\x8a\x95\x74\xb9\x44\xf3\x4c\x03\xa7\x91\x3a\x2e\xab\x5e\xca\xe6\xdf\x16\x39\xdf\x67\x73\x06\x7b\x5b\xca\x16\xcf\x9c\x6b\x8c\x51\xbc\x3a\xec\xfe\xa4\xdd\x6f\x07\xfd\x84\x17\x6f\x4b\xf4\xaf\xe8\x36\x87\xaf\x00\x00\x00\xff\xff\x4c\xc7\x63\x1c\x07\x02\x00\x00"),
		},
		"/flux-config-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 532,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcd\x8e\xd3\x30\x10\xbe\xfb\x29\x3e\x35\x42\x02\xa9\x89\x04\xc7\xdc\x50\x25\x24\x0e\xc0\x01\xc4\x7d\x14\x8f\xdb\x11\x89\x6d\xec\x49\x0b\x32\x7d\x77\xe4\x24\xdd\x6e\x57\x7b\xf2\xd8\xfe\xfe\x66\xa6\x14\x88\x03\x79\x8b\xee\x10\xbc\x93\xe3\x27\x19\xf9\x10\xbc\xb2\x57\xbc\xf5\x41\x6f\xef\x1f\xf3\x7a\x7e\xa1\xf8\x0e\xd7\xab\x69\xf0\xe3\xc4\x70\x61\x1c\xc3\x45\xfc\x11\xdf\x79\x48\xac\x90\x8c\x39\xb3\x85\x06\xc4\x14\xce\x62\x19\x84\x61\x61\xce\x89\x54\x82\x87\x0b\x09\x6e\x9c\xff\xd8\x6e\x13\xb9\x53\x87\xc4\xa4\x6c\x6b\x24\x3d\x31\xda\x76\x65\xb6\x4e\x46\xc6\x10\xa6\xa9\x06\x1d\xc5\xb3\x69\x10\xe2\xa2\x26\xf9\x66\x64\x3b\x7c\x76\x77\x0e\xe5\xad\x9a\x28\x56\x54\x66\xad\xa9\x34\xcd\xbc\xaf\xea\xa6\x79\x91\xeb\x99\x3f\x65\x10\x9e\xfa\xdd\x23\xe8\x89\xd3\x45\x32\x43\xf4\x11\x67\x1a\xd0\xd6\x40\x67\xda\xb6\x35\x14\xe5\x27\xa7\x2c\xc1\xf7\x38\xbf\x37\xbf\xc4\xdb\x7e\x03\x98\x89\x95\x2c\x29\xf5\x06\xf0\x34\x71\xbf\xcc\x61\x8b\xb9\x6e\xa2\xfb\x4a\x13\xe7\x48\x03\xd7\x21\xaf\xb0\xe5\xda\xa3\x94\xc7\xdf\x52\xc0\xde\x56\x98\xfe\x8d\xdc\xe3\x5b\xa4\xdf\x33\x9b\xd5\xa0\x94\x16\x31\x89\x57\x87\xdd\x9b\xbc\x7b\x6d\xbb\xff\xe0\xc5\xdb\x5a\x7d\xa8\x22\x77\xb9\xff\x01\x00\x00\xff\xff\xa4\x05\xd6\x64\x14\x02\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7642,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xeb\x6f\x1b\x37\x12\xff\xee\xbf\x62\xa0\x1c\x90\x18\x90\x56\x76\xdd\x16\x87\xed\xb9\xb8\x34\x0f\xd7\x97\x26\x35\xe2\xe4\x0e\xfd\x54\x53\xdc\x91\x96\x10\x97\xdc\xe3\x70\xa5\x0a\x46\xff\xf7\xc3\x90\xfb\xe0\x4a\xf2\x03\xfd\x76\xf9\x10\xdb\xbb\xc3\x79\x3f\x7e\x9c\x9d\xcd\x66\x27\xa2\x56\xff\x46\x47\xca\x9a\x1c\x44\x5d\xd3\x7c\x73\x7e\xb2\x56\xa6\xc8\xe1\x2d\xd6\xda\xee\x2a\x34\xfe\xa4\x42\x2f\x0a\xe1\x45\x7e\x02\x60\x44\x85\x39\x2c\x75\xf3\xc7\xfd\x3d\xa8\x25\x64\x9f\x44\x85\x54\x0b\x89\xf0\xe7\x9f\xed\xfb\xf0\x67\x0e\xf7\xf7\xe3\xb7\xf7\xf7\x80\xa6\x60\x32\xaa\x51\x32\x33\x87\xb5\x56\x52\x50\x0e\xe7\x27\x00\x84\x1a\xa5\xb7\x8e\xdf\x00\x54\xc2\xcb\xf2\x17\xb1\x40\x4d\xf1\x41\x2a\x9b\xa9\xbd\x13\x1e\x57\xbb\xf8\xd2\xef\x6a\xcc\xe1\x33\x4a\x87\xc2\xe3\x09\x80\xc7\xaa\xd6\xc2\x63\xcb\x2c\xb1\x80\xff\x09\x63\xac\x17\x5e\x59\xd3\x33\x07\xa8\x9d\xad\xd0\x97\xd8\x50\xa6\xec\xbc\xb6\xce\xe7\x30\xb9\x38\xbb\x38\x9f\xc0\x0b\xf0\xa8\x75\x42\x01\xde\x02\x49\x27\x6a\x84\x79\x85\xde\x29\x49\x6c\x5c\x6d\x95\xf1\x2f\x09\xf8\x70\xd6\x32\xd6\x23\x1b\xf6\xac\x00\xe8\x7c\x11\x7e\x47\xb7\x51\x12\x5f\x4b\x69\x1b\xe3\x3f\x8d\x09\x01\x36\x56\x37\x15\xf6\xac\x66\x2d\xab\x95\xf2\xb3\x35\xee\x7a\x01\xc4\x5e\xf0\x83\xc0\xee\xc9\xc0\x6f\xc6\x47\x8a\x10\xe0\x84\xaa\xc0\xa5\x68\xb4\xff\x68\x0b\xcc\xe1\xec\xdb\xb3\x33\x78\x01\xdb\x12\x0d\x54\xac\x0d\x16\xe0\x50\x14\x33\x6b\xf4\x6e\x0a\x5b\x84\xad\x35\x2f\x3d\x2c\x10\xc4\x42\x23\xfb\x43\x96\x95\x2d\x4e\x5a\x86\x2f\xe0\x4b\xa9\x08\x14\x81\x00\x5f\xd5\x4b\x82\x86\xb0\x80\xa5\x75\xb0\x42\x83\x4e\x78\x65\x56\x70\x7b\xfb\x33\xac\x71\x47\x19\x5c\x1b\xf8\xf0\x77\x82\x1f\x2f\xe1\x3c\x3b\x3f\x9b\xf6\x5c\x3a\xd9\xd1\x04\x02\xe1\x30\xd5\x83\x2c\xab\x62\x10\x0b\x10\x40\x58\x0b\x4e\x8a\xd6\x51\xb0\xc5\x9e\x8d\x14\x06\xb6\x4e\x79\x56\x34\x3b\xee\xbf\x15\x9a\xde\x19\x58\xd5\x7e\xf7\x56\xb9\xd4\x89\x15\x16\xaa\xa9\x72\xf8\x88\x95\x75\xbb\xd4\x4e\x84\xa5\xd5\xda\x6e\xd9\xa2\x56\xb4\xa2\x60\x6a\x43\xfc\x4c\x80\x6c\xc8\xdb\x4a\xb1\x07\xd6\xc6\x6e\xcd\xef\xa5\x25\x4f\x3d\x8b\xa5\xd2\x38\x85\x6d\xa9\x64\x09\x3b\xdb\xc0\x56\x69\x1d\x8d\xf2\x16\x0a\xcb\x75\xc6\x8f\xf9\x10\xff\xe2\xc0\x6e\x0d\xab\xdd\x33\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\xb4\x82\x57\xca\x97\xcd\x02\x2c\x3f\x44\xd0\x6a\x8d\x19\xfc\x66\x9b\x97\x5a\x83\xd0\x64\x3b\x11\x63\x67\x83\xf2\xa0\x8c\xb7\xe1\x8c\xb4\xc6\x0b\x65\xd0\x4d\x61\x81\xda\x6e\x33\xb8\xc5\xc1\xab\xa5\xf7\x35\xe5\xf3\x79\x61\x25\x65\x9c\x58\xb2\xe0\xd2\x41\x33\xe7\xd2\x23\x3f\x5f\x35\xaa\x40\x9a\x37\x84\xb3\xda\xa9\x8d\xf0\x18\x52\x8f\x0d\xc9\x4a\x5f\xe9\x9e\x53\x17\x0b\xa2\x72\x26\xad\x59\xaa\x55\xff\x0a\x20\x3e\xf8\x28\xea\x3c\x79\x98\x16\xd2\x2c\x39\xf6\x57\xe3\x92\xad\x9b\x05\xce\x23\x93\x21\xfd\x9e\x8c\xc9\x56\x51\xc9\x4f\x4a\xb1\x41\x10\x50\xa8\xe5\x12\x1d\x37\xcd\x8e\x43\x5b\x55\x43\x63\x0c\x21\x88\xec\xd2\x20\x70\x73\xd9\xa8\x02\x3b\xb7\x2f\xd5\xaa\x12\xf5\xa0\x88\xf2\x25\x08\x03\x68\xbc\xdb\x05\x1b\xee\x22\xd1\xdd\x14\x84\x29\xa0\x31\xd2\x56\xdc\xad\xc3\xf9\x68\xed\xc7\x10\x4e\x61\x8a\x9e\x0b\x9a\x4d\xe0\xa0\x90\xda\x78\x1e\x44\x80\xdd\xf0\x17\x22\x90\x1c\x7b\x32\x02\xa1\x13\x78\x0b\xaa\xe2\x3e\x09\x57\x37\x57\xa1\x09\xc0\x2b\x36\x8b\xd4\xca\x28\x33\x08\x67\xe3\x36\xe8\xd4\x52\xc9\xd0\xb0\xa1\x6e\x5c\x6d\x09\xe9\xf4\x19\x8e\xec\xb9\xc4\xf6\x11\xbd\xc8\x0e\x62\x79\xcf\x70\x1c\x08\xb7\x1a\xca\xf4\x01\x8f\xad\xea\x15\xf7\x0f\x4a\x5c\x33\x6e\xc1\x2f\x1e\x68\xc2\x87\xe7\x8e\x34\xe1\xf6\x6d\x3b\x6d\xdf\x04\x17\xbf\x57\x1a\xdf\x58\xe3\x59\xeb\x59\x18\xbb\x91\x64\x96\xd0\xbc\xa6\x37\x5d\xd0\x12\x9a\xa7\x83\xd2\x79\x4f\xb4\x41\x6f\x5c\x74\x3b\xc7\x86\xd5\x2e\x46\x9c\x86\xf3\x71\xf2\x16\xac\x01\x3b\x72\xd6\xd6\xe3\x8c\x7b\x1b\xb0\x8b\xd9\x9d\x5a\x99\x21\x26\xb6\x0e\x8c\x15\x75\x32\x8b\x0c\xae\x97\xc3\x49\x41\xb3\xbe\x0e\x98\x8a\xd0\xb3\x82\xde\x35\x38\x1d\x05\x77\xac\x68\xa2\x8b\xe0\xe9\xd3\xbb\x61\x0a\x96\x1b\xe4\x56\x11\x86\x1e\x97\xd2\x0d\xe9\x06\xb7\x21\x4e\xfb\x43\x22\x44\xac\x55\x2c\x1a\xdd\x8f\x86\x83\xe2\xd8\x2b\x8d\x51\x35\x71\x90\x18\x05\x1d\x84\xed\x95\xb1\xfe\x48\xec\x4e\x13\xca\x67\xe8\xf2\x8c\xd9\xff\x0c\x75\x5a\x98\x76\xd2\xdb\x17\x67\xc0\x01\xf2\x48\xb0\x49\x9b\x10\x0e\xc3\x84\x36\x16\x26\x79\x9c\x01\x13\x50\x95\x58\x21\xf5\x09\x94\xc1\x7b\x65\x8a\x90\x24\x15\x0f\x34\x87\x72\xe8\x97\x71\x98\x69\x14\x84\x3c\xb6\xc2\x51\x2e\x7f\x46\xa8\x20\x7c\x3f\x71\xca\x66\x91\x15\x56\xae\xd1\x65\xd2\x56\x73\x37\x8f\xd3\x27\xfc\x98\x7b\xd1\x17\x6d\xd7\x41\x18\x69\x32\x0a\x65\xa9\x5e\xac\x80\x35\xcd\x7a\x9a\x20\x26\x87\x96\xa1\xb2\x29\xb7\xfc\x3c\x3b\xff\x2e\x3b\x1b\xd3\xde\x34\x5a\xdf\x58\xad\xe4\x2e\x87\xeb\xe5\x27\xeb\x6f\x1c\x52\x6a\x85\x43\xb2\x8d\x93\x48\x69\x28\x1c\xfe\xb7\x41\xf2\xa3\x67\x00\xb2\x6e\x72\xf8\xee\xac\x1a\x3d\xac\x02\xc8\xc8\xe1\xfb\x6f\x3f\xaa\x01\xa0\x5a\x97\x1e\x9e\x0d\x91\xb9\x09\x60\xf5\xe2\xec\x82\x31\x9b\x32\x4b\xeb\xaa\x50\x0c\x42\xf7\xd4\x5a\x6d\xd0\x20\xd1\x8d\xb3\x0b\x4c\x35\x60\x97\x5e\x8d\x73\x26\x8a\x8a\x0c\xc7\x8f\x85\x2f\x73\x98\x8b\x5a\x45\x4f\x6f\xbe\x9f\xab\x02\x8d\x57\x7e\x97\xd5\xcd\x22\xa1\x55\x46\x79\x25\xf4\x5b\xd4\x62\x77\xcb\x93\xa1\xa0\x1c\xbe\x4b\x08\xbc\xaa\xd0\x36\xfe\xc8\x3b\x86\x77\xea\xff\x43\xd5\x64\x5c\x8c\x02\x73\x1c\x98\x43\x04\x58\x37\x51\x33\xf4\x32\x68\x56\xcc\x89\x4a\xbe\x61\xd8\x78\xe7\x01\x6d\xdb\x49\xb7\xe2\x90\x81\x32\x31\xe7\x5e\x52\x3c\x43\x54\xce\x47\x35\xdc\xf9\xec\x57\xa3\x77\x79\x68\x8f\xcc\x8d\xd1\x77\x98\x8d\x8b\x16\x52\x70\x49\xd5\xe8\x96\xd6\x49\x64\xa6\x11\x6e\x33\xda\x7e\x48\xf1\x14\x11\x8f\x75\xdf\x08\xd7\xea\x1e\xc9\xfe\x9a\xfa\x49\x8d\x5e\x1b\xa9\x9b\x30\xb3\xf9\xd2\x10\xa1\x55\x37\xcf\x23\x2a\x7d\x02\x44\x77\x30\xfa\x07\x3e\xba\x07\x70\x87\x39\x55\xa0\xd4\xc2\x71\xc7\x5f\xd8\x4d\xd2\x00\x1e\x01\xa0\x71\x30\xa7\xc6\x3b\x6b\xfd\x3c\x23\x2a\x1f\x34\x40\x98\x91\xd4\xc9\x00\x8e\x26\x51\xf2\xb4\x23\x49\x38\xa0\xd9\x28\x67\x4d\x80\x22\x11\xe5\x4d\x3e\x7c\xfd\xe9\xdd\x9b\x5f\x3f\xbd\xbf\xbe\x9a\x44\xf0\x31\x65\x7f\xd8\x0d\x3a\x37\x46\x8a\x09\x9b\x30\xc7\x17\xbb\x88\xe3\xbc\x3e\x66\xe3\x01\xc4\x3b\xb4\x71\x48\x4e\x26\x7e\xd0\x50\xc6\x0b\x7c\xe5\xed\xa4\x71\x8b\x4e\x40\x70\xab\x5d\x88\x49\xc2\x62\x1f\x4a\xa7\x41\x0f\x38\xba\xbb\xf4\x09\x03\x42\x7b\x74\x86\x2f\x75\x07\x1a\x2f\x9d\xad\x7a\x98\x52\xf1\x7c\x17\xc4\xe9\xd6\xe2\x39\x76\x83\xb6\x72\x4d\x87\xc1\x46\xb3\xc9\x8f\xf8\x65\x70\xf7\xc8\x2f\x1b\xa1\x1b\x3c\xf0\xc9\x53\x49\xbc\x9f\x03\x1d\xda\x7b\x24\x03\x18\x6c\x8e\x41\xe6\x23\x30\xf3\x81\xbc\x64\xaa\x88\xab\x47\x74\xe3\xfe\x30\x28\xfd\x0c\x58\xf9\x2c\xdc\xf1\x40\xf6\x24\x72\xf6\x51\xc5\x43\x55\xbf\x15\x26\xc0\x3c\x6a\xea\x5a\xef\xe0\xe7\x2f\x5f\x6e\x60\x21\x48\x49\x10\x8d\x2f\x19\xb2\x85\x2e\x2e\x74\x44\x14\xc3\x2d\x98\x19\x6e\x94\x08\x4e\xbf\xbb\xba\xfe\xf2\xfb\xeb\xaf\x5f\x7e\xfe\x7a\xfb\xee\xf3\x5d\x70\x75\xff\xe8\xc3\xbb\xdf\xee\x46\xc5\xb6\x11\x4e\x89\x85\x46\xea\xae\x85\x09\x43\x1a\x81\xc1\x36\x77\xde\x3b\x5b\x8d\xf3\x27\x92\x7d\xc6\x65\x3e\xf2\xfa\x08\x06\x72\x53\x65\x13\x06\x07\x70\xbc\xf3\x91\x3f\xa2\x0b\xe2\x66\x06\x0b\x46\x01\x52\xc8\x92\x51\xb5\x19\xd5\x55\x7f\x99\x64\x4f\x31\xf7\x69\xc2\xc5\xba\xf6\xb6\x98\x1c\x68\x37\x4b\xe1\xe0\x34\x08\x91\xc2\x74\x3e\xf6\x25\x52\x9a\x87\xc3\xf5\xc0\x6f\x2d\x6b\xd9\xb0\x9f\x42\xb5\x87\x35\x58\x08\x2d\x94\x76\x1b\xb6\x3e\xd6\x18\x94\x21\x64\xca\x8f\xf3\x76\x36\xeb\x0d\x08\x57\x7e\x16\x7e\xd9\x3f\xca\xda\xab\x4e\x46\x1b\x99\x49\xdd\x90\x47\x97\xf1\xf0\xd0\xa9\x4b\xbe\x52\xec\x73\x83\x2b\xde\x44\xd2\xeb\x9b\x91\x51\xdc\xf2\x08\x7d\xd8\x2a\x8d\xab\x6a\xd0\xa1\xa3\xe7\xec\xf2\x8e\x29\xc3\x9e\x27\xc9\xf3\x54\xe3\x96\xfa\xf2\x64\x84\x70\x15\x41\xd5\x50\xd8\x7b\x05\xef\x29\x2c\x62\x29\x2f\xc2\x50\x0d\xf8\x32\xac\xbb\x5e\x75\x3b\xa4\xd3\x54\x97\xae\xb1\xc5\x16\xc0\x09\x9c\x6c\xbd\x46\x8a\xf0\x20\x8a\xc3\x75\x56\x28\x77\x79\x30\x72\x53\xb5\x3e\x27\xe8\x76\x08\xde\xd7\xcf\xbf\xc4\xb5\x9c\x30\xab\xf8\xee\x4a\xf9\xb0\x2a\x22\xe5\xad\xdb\xf5\xa3\xe2\x3d\xa3\xf2\x84\xdd\x63\x35\xc7\x69\x93\xd8\xde\x96\xcc\xd1\x72\x4a\x6b\xa1\xc3\xed\x7f\x7b\x95\x56\xe6\x69\x3e\xfc\xfd\xe1\xdd\x6f\xa7\xff\x8c\x0b\xab\x00\xe9\x1b\x42\x37\x1f\x94\xcd\xd2\x42\x67\xff\x70\x39\x35\x4e\x5f\xde\xdf\x43\x76\xa5\x3c\x1b\x3b\x6a\x59\x91\x62\xe1\x84\x91\x65\x47\xf4\x53\xf8\x2b\xae\xa2\xb9\xed\x5d\xa9\xd0\xb1\xe8\xd8\x49\xc6\x8f\x7c\xee\x36\x64\x0a\xfd\xcb\x2a\x93\x1c\x98\x4c\x27\xed\x46\x5b\x13\xa6\xc7\x1f\x6f\x6a\x0e\x39\xf1\x64\xdc\x35\x54\xc2\xa8\x25\xdf\x07\xb8\x86\x48\x15\xe8\x62\x38\xf6\x6e\x55\x61\x13\x67\x09\xa1\x31\x05\xba\xbd\x18\x3b\xd4\xc2\xab\x0d\x06\xb8\x4b\x5d\x06\xae\x46\x71\xde\xab\xc9\xde\x38\x6a\x16\x85\x72\xe7\xd3\xf8\xf3\x9b\x7e\x3d\x3f\x38\x27\xac\xdf\x8f\x39\x27\xec\xb4\x3b\xaf\x76\x54\x47\x18\x7c\x25\x74\xc7\xce\x73\x70\xfb\xc8\x31\x0d\x1c\x3f\xff\xae\x12\xea\xa8\x02\xc8\x2f\x3a\x0e\x1d\xd5\xf0\x81\xe1\x68\x38\x90\x5b\xc9\xd6\xb2\x43\xd1\x84\xa5\x35\xfb\x89\xd1\x82\xf2\x7b\x6b\xa7\xd4\x57\xed\xdc\x6d\xa7\xea\xe5\x23\x63\xb6\x3b\xd1\xf2\xe2\x53\x97\xff\x58\xe3\x0e\x54\xf1\xe3\x63\x10\x2a\xd1\x86\x8f\x0a\xdf\x38\x1c\xed\xbc\x8e\xc8\x08\xaf\x77\xb3\x9e\x9e\x46\x6d\xaa\xeb\xd2\xa0\x3c\x94\x82\xc2\xf8\xb7\x46\xef\x40\x48\x89\x14\x3b\x79\x89\x71\x6d\xfc\xaa\xdb\x50\xde\x2d\x85\x26\xbc\x3b\x3d\x22\xad\x3b\x3f\xb6\x82\xbc\x6b\xa4\x8f\x82\xb6\xe1\xee\xcf\x78\xb0\xf1\x40\x3b\x23\x61\x61\xed\x7a\x8d\x58\x73\x9a\xf6\x32\x26\x2b\xe5\x27\x53\xa8\x50\xb0\x87\xb8\x03\x81\x08\x17\xf2\x36\x73\x9b\x9a\xbc\x43\x51\xf5\x29\xbc\xaf\x0d\xb3\x9e\x91\x17\x1e\x2f\xb9\x23\x3c\x18\x68\x83\x7f\xf8\x2e\xda\xc9\x88\x12\x06\x26\x9d\x8c\x49\x37\x40\x12\x26\xaf\x30\x5b\x65\x53\xf8\x0f\x32\x0c\x7d\xa3\x6d\x53\x9c\x66\x61\xd1\xe5\xed\x1a\xe3\xae\x4a\x38\xaf\x64\xa3\x85\xeb\xbc\xd8\x72\xd9\x9f\x7d\xad\xd4\xcb\x2d\x71\xe3\x93\xcc\x2b\xdb\x32\xdf\x6c\x6b\xdd\x9a\xfa\x9b\xe9\xde\xb1\x20\xe8\x52\x2c\xe4\xf9\x37\x17\x87\xff\xa7\x06\xdf\xa2\xdb\x1c\xf9\xfc\xc4\x18\x7c\x18\xfc\x9c\xa2\x3f\xa4\x13\x48\xac\xb9\x7b\xc7\x58\x11\xfa\xe4\x9b\xd6\xcb\xe4\xb3\x58\xf2\x7d\x8b\x4d\x0c\x7b\xda\x80\x83\xb3\x51\x29\x6a\x45\x1e\xcd\xac\x55\xe1\x32\xbf\x38\xbb\x38\x3f\x69\xcb\xf7\x75\x51\xa8\xb8\x83\xe0\xf9\xf2\x9a\xb1\xed\xa8\x4f\x0e\xef\x07\x88\x31\xc2\x8b\x2e\xcc\xad\x27\xf8\xcc\xc2\x67\xc6\xf4\x49\x02\x35\x87\x86\xd0\x09\xfd\xb5\x6e\x45\xbe\xfd\x74\xdb\xe1\x05\x9a\xf6\x1b\xc4\x16\x3d\x80\x29\xac\xa7\x6e\x41\x59\x89\x5d\xd8\xe7\xe8\xcd\xb0\x72\x34\xa4\xad\x5d\x37\x35\x28\xa2\x06\x09\xac\x01\xb2\x15\xc2\x87\x66\x81\xce\xa0\xc7\xb0\xae\x6c\x6a\x1a\xd6\xc5\x85\xa1\x6e\x65\x34\xf9\x64\x0d\x4e\xd2\x37\x11\x80\xa7\x0b\xe3\x28\x9c\xc6\x3b\xe4\x0e\x89\x07\xfd\x46\x6f\xfa\x6b\xca\xe4\x7c\x72\xf2\xbf\x00\x00\x00\xff\xff\x08\x7f\x61\x6e\xda\x1d\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config-configmap.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config-secret.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
